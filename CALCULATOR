import numpy as np

def calculate(list):
    # Check if the list contains exactly 9 numbers
    if len(list) != 9:
        raise ValueError("List must contain nine numbers.")
    
    # Convert list to a 3x3 Numpy array
    array = np.array(list).reshape(3, 3)
    
    # Calculate the required statistics
    calculations = {
        'mean': [array.mean(axis=0).tolist(), array.mean(axis=1).tolist(), array.mean().tolist()],
        'variance': [array.var(axis=0).tolist(), array.var(axis=1).tolist(), array.var().tolist()],
        'standard deviation': [array.std(axis=0).tolist(), array.std(axis=1).tolist(), array.std().tolist()],
        'max': [array.max(axis=0).tolist(), array.max(axis=1).tolist(), array.max().tolist()],
        'min': [array.min(axis=0).tolist(), array.min(axis=1).tolist(), array.min().tolist()],
        'sum': [array.sum(axis=0).tolist(), array.sum(axis=1).tolist(), array.sum().tolist()]
    }
    
    return calculations


  import pandas as pd

def demographic_data_analyzer():
    # Read the dataset
    df = pd.read_csv("adult.data.csv", header=None, names=["age", "workclass", "fnlwgt", "education", "education-num", 
                                                           "marital-status", "occupation", "relationship", "race", 
                                                           "sex", "capital-gain", "capital-loss", "hours-per-week", 
                                                           "native-country", "salary"])

    # 1. How many people of each race are represented in this dataset?
    race_count = df['race'].value_counts()

    # 2. What is the average age of men?
    average_age_men = round(df[df['sex'] == 'Male']['age'].mean(), 1)

    # 3. What is the percentage of people who have a Bachelor's degree?
    percentage_bachelors = round((df['education'] == 'Bachelors').mean() * 100, 1)

    # 4. What percentage of people with advanced education (Bachelors, Masters, or Doctorate) make more than 50K?
    higher_education = df['education'].isin(['Bachelors', 'Masters', 'Doctorate'])
    higher_education_rich = round((df[higher_education & (df['salary'] == '>50K')].shape[0] / df[higher_education].shape[0]) * 100, 1)

    # 5. What percentage of people without advanced education make more than 50K?
    lower_education = ~higher_education
    lower_education_rich = round((df[lower_education & (df['salary'] == '>50K')].shape[0] / df[lower_education].shape[0]) * 100, 1)

    # 6. What is the minimum number of hours a person works per week?
    min_work_hours = df['hours-per-week'].min()

    # 7. What percentage of the people who work the minimum number of hours per week have a salary of more than 50K?
    num_min_workers = df[df['hours-per-week'] == min_work_hours]
    rich_percentage = round((num_min_workers[num_min_workers['salary'] == '>50K'].shape[0] / num_min_workers.shape[0]) * 100, 1)

    # 8. What country has the highest percentage of people that earn >50K and what is that percentage?
    country_earnings = df[df['salary'] == '>50K']['native-country'].value_counts()
    country_totals = df['native-country'].value_counts()
    highest_earning_country_percentage = round((country_earnings / country_totals * 100).max(), 1)
    highest_earning_country = (country_earnings / country_totals * 100).idxmax()

    # 9. Identify the most popular occupation for those who earn >50K in India.
    india_occupations = df[(df['native-country'] == 'India') & (df['salary'] == '>50K')]['occupation'].value_counts()
    top_IN_occupation = india_occupations.idxmax()

    # Return all the results as a dictionary
    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'lower_education_rich': lower_education_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage': highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }

# Example of how to test the function
if __name__ == "__main__":
    print(demographic_data_analyzer())
--------

  import pandas as pd

# Step 1: Import the data
df = pd.read_csv('medical_examination.csv')

  # Step 2: Add an overweight column
df['overweight'] = (df['weight'] / ((df['height'] / 100) ** 2) > 25).astype(int)

# Step 3: Normalize cholesterol and glucose data
df['cholesterol'] = (df['cholesterol'] > 1).astype(int)
df['gluc'] = (df['gluc'] > 1).astype(int)

import seaborn as sns
import matplotlib.pyplot as plt

def draw_cat_plot():
    # Step 4: Create a DataFrame for cat plot using pd.melt
    df_cat = pd.melt(df, id_vars=['cardio'], value_vars=['cholesterol', 'gluc', 'smoke', 'alco', 'active', 'overweight'])

    # Group and reformat the data to split by cardio and count the occurrences
    df_cat = df_cat.groupby(['cardio', 'variable', 'value']).size().reset_index(name='total')

    # Draw the categorical plot
    catplot = sns.catplot(x='variable', y='total', hue='value', col='cardio', data=df_cat, kind='bar')

    # Get the figure for output
    fig = catplot.fig
    return fig

  def draw_heat_map():
    # Step 5: Clean the data
    df_heat = df[(df['ap_lo'] <= df['ap_hi']) & 
                 (df['height'] >= df['height'].quantile(0.025)) &
                 (df['height'] <= df['height'].quantile(0.975)) &
                 (df['weight'] >= df['weight'].quantile(0.025)) &
                 (df['weight'] <= df['weight'].quantile(0.975))]

    # Step 6: Calculate the correlation matrix
    corr = df_heat.corr()

    # Step 7: Generate a mask for the upper triangle
    mask = np.triu(corr)

    # Step 8: Set up the matplotlib figure
    fig, ax = plt.subplots(figsize=(12, 12))

    # Step 9: Draw the heatmap
    sns.heatmap(corr, annot=True, fmt='.1f', mask=mask, square=True, cmap='coolwarm', ax=ax)

    return fig

  ---------------------------------------
  import pandas as pd

# Step 1: Import the data
df = pd.read_csv('fcc-forum-pageviews.csv', parse_dates=['date'], index_col='date')

# Step 2: Clean the data by removing the top and bottom 2.5% of the data
df = df[(df['value'] >= df['value'].quantile(0.025)) & (df['value'] <= df['value'].quantile(0.975))]

  import matplotlib.pyplot as plt

def draw_line_plot():
    # Step 3: Create a line plot
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df.index, df['value'], color='r', linewidth=1)

    # Title and labels
    ax.set_title('Daily freeCodeCamp Forum Page Views 5/2016-12/2019')
    ax.set_xlabel('Date')
    ax.set_ylabel('Page Views')

    # Save and return the figure
    fig.savefig('line_plot.png')
    return fig

  import matplotlib.dates as mdates

def draw_bar_plot():
    # Step 4: Prepare data for bar plot
    df_bar = df.copy()
    df_bar['year'] = df_bar.index.year
    df_bar['month'] = df_bar.index.month_name()

    # Pivot data for grouped bar plot
    df_bar = df_bar.groupby(['year', 'month'])['value'].mean().unstack()

    # Step 5: Create the bar plot
    fig = df_bar.plot(kind='bar', figsize=(12, 6), legend=True).figure

    # Customize labels and title
    plt.xlabel('Years')
    plt.ylabel('Average Page Views')
    plt.title('Average Daily Page Views per Month')

    # Set legend and month order
    plt.legend(title='Months', labels=[mdates.DateFormatter('%B').strftime(i) for i in range(1, 13)])

    # Save and return the figure
    fig.savefig('bar_plot.png')
    return fig

import seaborn as sns

def draw_box_plot():
    # Step 6: Prepare data for box plot
    df_box = df.copy()
    df_box.reset_index(inplace=True)
    df_box['year'] = df_box['date'].dt.year
    df_box['month'] = df_box['date'].dt.strftime('%b')

    # Sort the months in correct order
    df_box['month'] = pd.Categorical(df_box['month'], categories=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], ordered=True)

    # Step 7: Create box plots
    fig, axes = plt.subplots(1, 2, figsize=(15, 6))

    # Year-wise box plot
    sns.boxplot(x='year', y='value', data=df_box, ax=axes[0])
    axes[0].set_title('Year-wise Box Plot (Trend)')
    axes[0].set_xlabel('Year')
    axes[0].set_ylabel('Page Views')

    # Month-wise box plot
    sns.boxplot(x='month', y='value', data=df_box, ax=axes[1])
    axes[1].set_title('Month-wise Box Plot (Seasonality)')
    axes[1].set_xlabel('Month')
    axes[1].set_ylabel('Page Views')

    # Save and return the figure
    fig.savefig('box_plot.png')
    return fig
----------------------------------------
  import pandas as pd

# Step 1: Load the data
df = pd.read_csv("epa-sea-level.csv")

  import matplotlib.pyplot as plt

def draw_plot():
    # Step 2: Create a scatter plot
    plt.figure(figsize=(10, 6))
    plt.scatter(df['Year'], df['CSIRO Adjusted Sea Level'], color='b', label='Original Data')

    # Labels and title
    plt.xlabel('Year')
    plt.ylabel('Sea Level (inches)')
    plt.title('Rise in Sea Level')

  import matplotlib.pyplot as plt

def draw_plot():
    # Step 2: Create a scatter plot
    plt.figure(figsize=(10, 6))
    plt.scatter(df['Year'], df['CSIRO Adjusted Sea Level'], color='b', label='Original Data')

    # Labels and title
    plt.xlabel('Year')
    plt.ylabel('Sea Level (inches)')
    plt.title('Rise in Sea Level')

      # Step 4: Perform linear regression on the data from 2000 onward
    df_recent = df[df['Year'] >= 2000]
    slope_recent, intercept_recent, r_value_recent, p_value_recent, std_err_recent = linregress(df_recent['Year'], df_recent['CSIRO Adjusted Sea Level'])

    # Create x values for the line of best fit (2000 to 2050)
    recent_years_extended = np.arange(2000, 2051)

    # Calculate y values using the slope and intercept for 2000-2050
    recent_sea_level_pred = intercept_recent + slope_recent * recent_years_extended

    # Plot the line of best fit for the recent period
    plt.plot(recent_years_extended, recent_sea_level_pred, 'g', label='Best Fit Line 2000-2050')

      # Add a legend
    plt.legend()

    # Save the plot as an image file
    plt.savefig('sea_level_plot.png')

    # Return the current figure
    return plt.gcf()

  import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import linregress
import numpy as np

def draw_plot():
    # Step 1: Load the data
    df = pd.read_csv("epa-sea-level.csv")

    # Step 2: Create a scatter plot
    plt.figure(figsize=(10, 6))
    plt.scatter(df['Year'], df['CSIRO Adjusted Sea Level'], color='b', label='Original Data')

    # Labels and title
    plt.xlabel('Year')
    plt.ylabel('Sea Level (inches)')
    plt.title('Rise in Sea Level')

    # Step 3: Perform linear regression on the full dataset (1880-2014)
    slope, intercept, r_value, p_value, std_err = linregress(df['Year'], df['CSIRO Adjusted Sea Level'])

    # Create x values for the line of best fit (1880 to 2050)
    years_extended = np.arange(df['Year'].min(), 2051)
    sea_level_pred = intercept + slope * years_extended

    # Plot the line of best fit
    plt.plot(years_extended, sea_level_pred, 'r', label='Best Fit Line 1880-2050')

    # Step 4: Perform linear regression on the data from 2000 onward
    df_recent = df[df['Year'] >= 2000]
    slope_recent, intercept_recent, r_value_recent, p_value_recent, std_err_recent = linregress(df_recent['Year'], df_recent['CSIRO Adjusted Sea Level'])

    # Create x values for the line of best fit (2000 to 2050)
    recent_years_extended = np.arange(2000, 2051)
    recent_sea_level_pred = intercept_recent + slope_recent * recent_years_extended

    # Plot the line of best fit for the recent period
    plt.plot(recent_years_extended, recent_sea_level_pred, 'g', label='Best Fit Line 2000-2050')

    # Add a legend
    plt.legend()

    # Save the plot as an image file
    plt.savefig('sea_level_plot.png')

    # Return the current figure
    return plt.gcf()


  
